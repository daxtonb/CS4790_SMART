@model IEnumerable<Smart.Pages.Classes.AssessmentsModel.AssessmentSubmissionViewModel>

<table class="table table-sm">
    <thead>
        <tr>
            <th role="columnheader">Student</th>
            <th role="columnheader">Submitted</th>
            <th role="columnheader">Score</th>
            <th role="columnheader">Comments</th>
            <th role="columnheader">File</th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>@item.StudentName</td>
            <td>
                <span>
                    @if (item.SubmissionDateTime.HasValue)
                    {
                        <text>@item.SubmissionDateTime.Value.ToString("M/d/yyyy hh:mm tt")</text>
                    }
                    else
                    {
                        <i class="fa fa-minus"></i>
                    }
                </span>
                <input name="SubmissionDateTime" type="datetime" value="@(item.SubmissionDateTime ?? DateTime.Now)" class="form-control d-none" />
            </td>
            <td>
                <span>
                    @if (item.PointsAwarded.HasValue)
                    {
                        <text>@item.PointsAwarded</text>
                    }
                    else
                    {
                        <i class="fa fa-minus"></i>
                    }
                </span>
                <input name="PointsAwarded" type="number" value="@item.PointsAwarded" class="form-control d-none" style="width:75px" />
            </td>
            <td>
                <span>
                    @if (!string.IsNullOrEmpty(item.Comments))
                    {
                        <text>@item.Comments</text>
                    }
                    else
                    {
                        <i class="fa fa-minus"></i>
                    }
                </span>
                <textarea name="Comments" value="@item.Comments" class="form-control d-none">@item.Comments</textarea>
            </td>
            <td>
                <span>
                    @if (!string.IsNullOrEmpty(item.FileName))
                    {
                        <text>@item.FileName</text>
                    }
                    else
                    {
                        <i class="fa fa-minus"></i>
                    }
                </span>

                <button class="d-none btn btn-sm btn-success" type="button" onclick="getFile()"><i class="fa fa-upload"></i></button>
            </td>
            <td>
                <button type="button" class="btn btn-success btn-sm" onclick="toggleEdit(this.parentElement.parentElement)"><i class="fa fa-edit"></i></button>
                <div class="btn-group btn-group-sm d-none">
                    <button type="button" class="btn btn-primary" onclick="save(this.parentElement.parentElement.parentElement, @item.StudentId)"><i class="fa fa-save"></i></button>
                    <button type="button" class="btn btn-warning" onclick="toggleEdit(this.parentElement.parentElement.parentElement)"><i class="fa fa-times"></i></button>
                </div>
            </td>
        </tr>
        }
    </tbody>
</table>

<!-- Hidden form for updating submissions -->
<form id="submission-form" asp-page-handler="SubmitStudentAssessment" enctype="multipart/form-data" name="submission-form"  data-ajax="true" data-ajax-success="reload()">
    <input type="hidden" name="AssessmentId" />
    <input type="hidden" name="StudentId" />
    <input type="hidden" name="SubmissionDateTime" />
    <input type="hidden" name="PointsAwarded" />
    <input type="hidden" name="Comments" />
    <input type="file" class="d-none" name="File" />
    <input type="submit" name="Submit" style="display:none" />
</form>

<script>
    const assessmentId = @ViewData["AssessmentId"];
    const classId = @ViewData["ClassId"];

    function getFile() {
        document.getElementsByName('File')[0].click();
        console.log(document.getElementsByName('File')[0]);
    }

    function toggleEdit(tr) {
        const tdArr = Array.from(tr.children);
        let span, input;

        for (const td of tdArr) {
            if (!td.children.length)
                continue;

            span = td.children[0];
            input = td.children[1];

            // Toggle visibility of text and inputs
            if (span.classList.contains('d-none')) {
                span.classList.remove('d-none');
                input.classList.add('d-none');
            } else {
                span.classList.add('d-none');
                input.classList.remove('d-none');
            }
        }
    }

    function save(tr, studentId) {
        const hiddenForm = document.forms['submission-form'];
        const inputArr = Array.from(tr.getElementsByTagName('INPUT'));
        inputArr.push(tr.getElementsByTagName('TEXTAREA')[0]);

        for (const input of inputArr) {
            hiddenForm[input.name].value = input.value;
        }

        hiddenForm["AssessmentId"].value = assessmentId;
        hiddenForm["StudentId"].value = studentId;
        console.log(hiddenForm["File"].value);

        hiddenForm["Submit"].click(); // Submit form
    }

    function reload() {
        const url = '/Classes/' + classId + '/Assessments?handler=Submissions&classId=' + classId + '&assessmentId=' + assessmentId;
        const modalBody = $('#details-modal-body');

        // Clear modal body
        $(modalBody).text('Loading...');

        // Get form HTML and intialize client-side validation
        $(modalBody).load(url, null, () => { $.validator.unobtrusive.parse('form'); });
    }
</script>
