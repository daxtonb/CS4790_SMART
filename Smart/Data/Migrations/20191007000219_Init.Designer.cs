// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Smart.Data;

namespace Smart.data.migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20191007000219_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<int>");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Smart.Data.Models.ApplicantRating", b =>
                {
                    b.Property<int>("ApplicantRatingId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("RatingCirteriumId");

                    b.Property<int>("RatingCiteriumId");

                    b.Property<int>("ScoreAssigned");

                    b.Property<int>("StudentId");

                    b.Property<int>("TermId");

                    b.Property<int>("UserId");

                    b.HasKey("ApplicantRatingId");

                    b.HasIndex("RatingCirteriumId");

                    b.HasIndex("StudentId");

                    b.HasIndex("TermId");

                    b.HasIndex("UserId");

                    b.ToTable("ApplicantRating");
                });

            modelBuilder.Entity("Smart.Data.Models.Assessment", b =>
                {
                    b.Property<int>("AssessmentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CourseTermId");

                    b.Property<string>("Description");

                    b.Property<int>("PointsPossible");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("AssessmentId");

                    b.HasIndex("CourseTermId");

                    b.ToTable("Assessment");
                });

            modelBuilder.Entity("Smart.Data.Models.Attendance", b =>
                {
                    b.Property<int>("StudentId");

                    b.Property<int>("CourseTermId");

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<int>("UserId");

                    b.HasKey("StudentId", "CourseTermId", "Date");

                    b.HasIndex("CourseTermId");

                    b.HasIndex("UserId");

                    b.ToTable("Attendance");
                });

            modelBuilder.Entity("Smart.Data.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<int>("Number");

                    b.HasKey("CourseId");

                    b.ToTable("Course");
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTerm", b =>
                {
                    b.Property<int>("CourseTermId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("Capacity");

                    b.Property<int>("CourseId");

                    b.Property<int>("TermId");

                    b.HasKey("CourseTermId");

                    b.HasIndex("CourseId");

                    b.HasIndex("TermId");

                    b.ToTable("CourseTerm");
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTermInstructor", b =>
                {
                    b.Property<int>("CourseTermId");

                    b.Property<int>("UserId");

                    b.HasKey("CourseTermId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("CourseTermInstructor");
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTermSchedule", b =>
                {
                    b.Property<int>("CourseTermId");

                    b.Property<int>("ScheduleId");

                    b.HasKey("CourseTermId", "ScheduleId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("CourseTermSchedule");
                });

            modelBuilder.Entity("Smart.Data.Models.Error", b =>
                {
                    b.Property<int>("ErrorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Message");

                    b.Property<string>("StackTrace");

                    b.Property<int?>("UserId");

                    b.HasKey("ErrorId");

                    b.HasIndex("UserId");

                    b.ToTable("Error");
                });

            modelBuilder.Entity("Smart.Data.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateTime");

                    b.Property<string>("Description");

                    b.Property<int>("UserId");

                    b.HasKey("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Smart.Data.Models.File", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FileTypeId");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<int>("StudentId");

                    b.HasKey("FileId");

                    b.HasIndex("FileTypeId");

                    b.HasIndex("StudentId");

                    b.ToTable("File");
                });

            modelBuilder.Entity("Smart.Data.Models.FileType", b =>
                {
                    b.Property<int>("FileTypeId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.HasKey("FileTypeId");

                    b.ToTable("FileType");
                });

            modelBuilder.Entity("Smart.Data.Models.Note", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Studentid");

                    b.Property<string>("Text");

                    b.Property<int>("UserId");

                    b.HasKey("NoteId");

                    b.HasIndex("Studentid");

                    b.HasIndex("UserId");

                    b.ToTable("Note");
                });

            modelBuilder.Entity("Smart.Data.Models.PublicSchoolCourseSchedule", b =>
                {
                    b.Property<int>("PublicSchoolCourseScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ScheduleId");

                    b.Property<int>("StudentPublicSchoolCourseId");

                    b.HasKey("PublicSchoolCourseScheduleId");

                    b.HasIndex("ScheduleId");

                    b.HasIndex("StudentPublicSchoolCourseId");

                    b.ToTable("PublicSchoolCourseSchedule");
                });

            modelBuilder.Entity("Smart.Data.Models.RatingCirterium", b =>
                {
                    b.Property<int>("RatingCirteriumId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(512);

                    b.Property<int>("MaxScore");

                    b.HasKey("RatingCirteriumId");

                    b.ToTable("RatingCirterium");
                });

            modelBuilder.Entity("Smart.Data.Models.Schedule", b =>
                {
                    b.Property<int>("ScheduleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte>("DayOfWeek");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time(0)");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time(0)");

                    b.HasKey("ScheduleId");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("Smart.Data.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(128);

                    b.Property<int?>("CourseTermId");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("GuardianName")
                        .HasMaxLength(64);

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsEnrolled");

                    b.Property<bool>("IsWaitlisted");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<decimal>("LocationLattitude");

                    b.Property<decimal>("LocationLongitude");

                    b.Property<string>("Phone")
                        .HasMaxLength(16);

                    b.Property<string>("Photo")
                        .HasMaxLength(256);

                    b.Property<byte>("PublicSchoolLevel");

                    b.Property<string>("Village")
                        .HasMaxLength(64);

                    b.HasKey("StudentId");

                    b.HasIndex("CourseTermId");

                    b.ToTable("Student");
                });

            modelBuilder.Entity("Smart.Data.Models.StudentAssessment", b =>
                {
                    b.Property<int>("AssessmentId");

                    b.Property<int>("StudentId");

                    b.Property<string>("Comments");

                    b.Property<int>("PointsAwarded");

                    b.HasKey("AssessmentId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentAssessment");
                });

            modelBuilder.Entity("Smart.Data.Models.StudentCourseTerm", b =>
                {
                    b.Property<int>("CourseTermId");

                    b.Property<int>("StudentId");

                    b.HasKey("CourseTermId", "StudentId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentCourseTerm");
                });

            modelBuilder.Entity("Smart.Data.Models.StudentPublicSchoolCourse", b =>
                {
                    b.Property<int>("StudentPublicSchoolCourseId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<int>("StudentId");

                    b.Property<byte>("TimeOfYear");

                    b.HasKey("StudentPublicSchoolCourseId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentPublicSchoolCourse");
                });

            modelBuilder.Entity("Smart.Data.Models.Term", b =>
                {
                    b.Property<int>("TermId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128);

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("date");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date");

                    b.Property<byte>("TimeOfYear");

                    b.HasKey("TermId");

                    b.ToTable("Term");
                });

            modelBuilder.Entity("Smart.Data.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(32);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Smart.Data.Models.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Smart.Data.Models.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<int>");

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("Smart.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("Smart.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<int>")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("Smart.Data.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.ApplicantRating", b =>
                {
                    b.HasOne("Smart.Data.Models.RatingCirterium", "RatingCirterium")
                        .WithMany("ApplicantRatings")
                        .HasForeignKey("RatingCirteriumId");

                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("ApplicantRatings")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Term", "Term")
                        .WithMany()
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("ApplicantRatings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.Assessment", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany()
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.Attendance", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany("Attendances")
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("Attendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("Attendances")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTerm", b =>
                {
                    b.HasOne("Smart.Data.Models.Course", "Course")
                        .WithMany("CourseTerms")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Term", "Term")
                        .WithMany("CourseTerms")
                        .HasForeignKey("TermId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTermInstructor", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany("CourseTermInstructors")
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("CourseTermInstructors")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.CourseTermSchedule", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany("CourseTermSchedules")
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Schedule", "Schedule")
                        .WithMany("CourseTermSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.Error", b =>
                {
                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("Errors")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Smart.Data.Models.Event", b =>
                {
                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("Events")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.File", b =>
                {
                    b.HasOne("Smart.Data.Models.FileType", "FileType")
                        .WithMany("Files")
                        .HasForeignKey("FileTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("Files")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.Note", b =>
                {
                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("Notes")
                        .HasForeignKey("Studentid")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("Notes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.PublicSchoolCourseSchedule", b =>
                {
                    b.HasOne("Smart.Data.Models.Schedule", "Schedule")
                        .WithMany("PublicSchoolCourseSchedules")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.StudentPublicSchoolCourse", "StudentPublicSchoolCourse")
                        .WithMany("PublicSchoolCourseSchedules")
                        .HasForeignKey("StudentPublicSchoolCourseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.Student", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm")
                        .WithMany("Students")
                        .HasForeignKey("CourseTermId");
                });

            modelBuilder.Entity("Smart.Data.Models.StudentAssessment", b =>
                {
                    b.HasOne("Smart.Data.Models.Assessment", "Assessment")
                        .WithMany("StudentAssessments")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("StudentAssessments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.StudentCourseTerm", b =>
                {
                    b.HasOne("Smart.Data.Models.CourseTerm", "CourseTerm")
                        .WithMany()
                        .HasForeignKey("CourseTermId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("StudentCourseTerms")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.StudentPublicSchoolCourse", b =>
                {
                    b.HasOne("Smart.Data.Models.Student", "Student")
                        .WithMany("StudentPublicSchoolCourses")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Smart.Data.Models.UserRole", b =>
                {
                    b.HasOne("Smart.Data.Models.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Smart.Data.Models.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
